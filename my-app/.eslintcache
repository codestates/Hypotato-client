[{"/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/Mypage.js":"1","/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/App.js":"2","/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/FieldContents.js":"3","/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/EditInfo.js":"4","/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/BadPotatoFilter.js":"5","/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/AddPotato.js":"6","/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/Potato.js":"7","/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/Emoji.js":"8","/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/Instruction.js":"9","/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/Field.js":"10","/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/Signup.js":"11","/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/index.js":"12","/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/Signin.js":"13","/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/NotFoundPage.js":"14"},{"size":8911,"mtime":1609688979443,"results":"15","hashOfConfig":"16"},{"size":3334,"mtime":1609725165254,"results":"17","hashOfConfig":"16"},{"size":1842,"mtime":1609688973489,"results":"18","hashOfConfig":"16"},{"size":9426,"mtime":1609688952353,"results":"19","hashOfConfig":"16"},{"size":10355,"mtime":1609690769041,"results":"20","hashOfConfig":"16"},{"size":7409,"mtime":1609688917754,"results":"21","hashOfConfig":"16"},{"size":12487,"mtime":1609689105819,"results":"22","hashOfConfig":"16"},{"size":179,"mtime":1608993427131,"results":"23","hashOfConfig":"16"},{"size":4536,"mtime":1609691747076,"results":"24","hashOfConfig":"16"},{"size":12872,"mtime":1609734514650,"results":"25","hashOfConfig":"16"},{"size":5717,"mtime":1609689051357,"results":"26","hashOfConfig":"16"},{"size":459,"mtime":1609604028010,"results":"27","hashOfConfig":"16"},{"size":4616,"mtime":1609725720599,"results":"28","hashOfConfig":"16"},{"size":502,"mtime":1609691227623,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"3qgbgc",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/Mypage.js",["64","65"],"import React, { Component } from \"react\";\nimport potatoLogo from \"../image/potato.png\";\nimport fieldImage from \"../image/field.png\";\nimport tresh from \"../image/badpotato.png\";\nimport axios from \"axios\";\nimport \"./Mypage.css\";\n\nclass Mypage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nickname: \"\",\n      email: \"\",\n      goodPotato: 0,\n      badPotato: 0,\n      field: 0,\n    };\n\n    this.goToField = this.goToField.bind(this);\n    this.goToMyPage = this.goToMyPage.bind(this);\n    this.goToInstruction = this.goToInstruction.bind(this);\n    this.goToEditInfo = this.goToEditInfo.bind(this);\n    this.signOutHandler = this.signOutHandler.bind(this);\n    this.countPotatoNumber = this.countPotatoNumber.bind(this);\n    this.countFieldNumber = this.countFieldNumber.bind(this);\n    this.renderMyUserInfo = this.renderMyUserInfo.bind(this);\n    this.getUserInfo = this.getUserInfo.bind(this);\n    this.BadPotatoFilter = this.BadPotatoFilter.bind(this);\n  }\n\n  renderMyUserInfo() {\n    const UserInfo = this.props.location.State;\n  }\n\n  BadPotatoFilter() {\n    const potatoes = this.props.location.state.potatoes;\n    let badpotatoes = [];\n    potatoes.forEach((badPotato) => {\n      if (badPotato.status === \"bad\") {\n        badPotato.isChecked = false;\n        badpotatoes.push(badPotato);\n      }\n    });\n    let badPotatoCount = badpotatoes.length;\n    let goodPotatoCount = potatoes.length - badpotatoes.length;\n    this.props.history.push(\"/badpotato\", {\n      badPotatoes: badpotatoes,\n      potatoes: potatoes,\n      badPotatoCount: badPotatoCount,\n      goodPotatoCount: goodPotatoCount,\n    });\n  }\n\n  goToField() {\n    axios({\n      method: \"get\",\n      url: ` https://www.hypotato.com/userinfo`,\n      withCredentials: true,\n    }).then((userInfo) => {\n      this.setState({ isFieldClicked: false });\n      this.props.history.push(\"/field\", { ...userInfo.data.data }); // 어디서든지 감자 프로필 이미지를 누르면 밭으로 가는데, 그 때 다시 밭 정보를 서버로부터 받아서 history push될 때 같이 보내주기 위한 로직.\n    });\n  }\n\n  goToMyPage() {\n    axios({\n      method: \"get\",\n      url: ` https://www.hypotato.com/userinfo`,\n      withCredentials: true,\n    }).then((userInfo) => {\n      this.props.history.push(\"/mypage\", { ...userInfo.data.data }); // 어디서든지 감자 프로필 이미지를 누르면 밭으로 가는데, 그 때 다시 밭 정보를 서버로부터 받아서 history push될 때 같이 보내주기 위한 로직.\n    }); // 마이페이지 안에서 마이페이지로가는 클릭 이벤트를 만든 이유: 그냥 눌러보는 user들이 있기 때문.\n  }\n\n  getUserInfo() {\n    const userInfo = this.props.location.state;\n    this.setState({\n      nickname: userInfo.nickname,\n      email: userInfo.email,\n    });\n  }\n\n  countPotatoNumber() {\n    const potatoes = this.props.location.state.potatoes;\n    let goodPotatoCnt = 0;\n    let badPotatoCnt = 0;\n    potatoes.map((potato) => {\n      if (potato.status === \"good\") {\n        goodPotatoCnt++;\n      } else {\n        badPotatoCnt++;\n      }\n    });\n    this.setState({\n      goodPotato: goodPotatoCnt,\n      badPotato: badPotatoCnt,\n    });\n  }\n\n  countFieldNumber() {\n    const fields = this.props.location.state.fields;\n    const fieldsLeng = fields.length;\n    this.setState({\n      field: fieldsLeng,\n    });\n  }\n\n  componentDidMount() {\n    this.countPotatoNumber();\n    this.countFieldNumber();\n    this.renderMyUserInfo();\n    this.getUserInfo();\n  }\n\n  goToInstruction() {\n    const potatoes = this.props.location.state.potatoes;\n    // 사용설명서로 갈 때는 axios요청이 불필요한데, 감자 개수를 카운트 하기 위해, state에 있는 값을 보냄. \n    const {goodPotato, badPotato} = this.state;\n    this.props.history.push(\"/instruction\", {goodPotato, badPotato, potatoes });\n  }\n\n  goToEditInfo() {\n    axios({\n      method: \"get\",\n      url: `https://www.hypotato.com/userinfo`,\n      withCredentials: true,\n    }).then((userinfo) => {\n      this.props.history.push(\"/editinfo\", { ...userinfo.data.data });\n    });\n  }\n\n  signOutHandler() {\n    axios({\n      method: \"post\",\n      url: `https://www.hypotato.com/signout`,\n      withCredentials: true,\n    }).then(() => {\n      this.props.history.push(\"/\");\n      this.props.classNameChanger(); // 로그아웃하면 다시 배경화면을 움직이도록 바꾸게 하는 메소드; App.js로부터 넘어옴\n    });\n  }\n\n  render() {\n    const { nickname, email, field, goodPotato, badPotato } = this.state;\n    return (\n      <>\n        <div className=\"field_entire\">\n          <div className=\"field_left\">\n            <div className=\"field_profile\">\n              <img\n                className=\"field_profile_photo\"\n                src={potatoLogo}\n                alt=\"이미지를 찾을 수 없습니다.\"\n                onClick={this.goToField}\n              />\n            </div>\n            <div className=\"field_potato_count\">\n              <div className=\"field_potato_count_good\">\n                정상 감자 개수 : {goodPotato}\n              </div>\n              <div\n                className=\"field_potato_count_bad\"\n                onClick={this.BadPotatoFilter}\n              >\n                썩은 감자 개수 : {badPotato}\n              </div>\n            </div>\n            <div className=\"field_categories\">\n              <div className=\"field_categories_title\">카테고리</div>\n              <div className=\" field_categories_table\">\n                <div className=\"field_categories_all\">전체</div>\n                <div className=\"field_categories_dev\">개발</div>\n                <div className=\"field_categories_travel\">여행</div>\n                <div className=\"field_categories_cook\">요리</div>\n              </div>\n            </div>\n          </div>\n          <div className=\"field_right\">\n            <div className=\"field_right_menu\">\n              <div\n                className=\"field_right_menu_mypage\"\n                onClick={this.goToMyPage}\n              >\n                마이페이지\n              </div>\n              <div\n                className=\"field_right_menu_manual\"\n                onClick={this.goToInstruction}\n              >\n                사용 설명서\n              </div>\n              <div\n                className=\"field_right_menu_logout\"\n                onClick={this.signOutHandler}\n              >\n                로그아웃\n              </div>\n            </div>\n            <div className=\"field_right_fields, test\">\n              <button className=\"mypage_edit_info\" onClick={this.goToEditInfo}>\n                Edit Info\n              </button>\n              <div className=\"mypage_contents\">\n                <div className=\"mypage_nickname\">\n                  <div className=\"mypage_nickname_key\">Nick Name</div>\n                  <div className=\"mypage_nickname_value\">\" {nickname} \"</div>\n                </div>\n                <div className=\"mypage_email\">\n                  <div className=\"mypage_email_key\">Email</div>\n                  <div className=\"mypage_email_value\">\" {email} \"</div>\n                </div>\n                <div className=\"mypage_info\">\n                  <div className=\"mypage_info_key\">Field Info</div>\n                  <div className=\"mypage_info_value\">\n                    <div className=\"mypage_info_field_entire\">\n                      <img\n                        className=\"mypage_info_field_logo\"\n                        src={fieldImage}\n                        alt=\"\"\n                        width=\"160px\"\n                        height=\"100px\"\n                      />\n                      <div className=\"mypage_info_field_value\"> = {field}</div>\n                    </div>\n                    <div className=\"mypage_info_potato_entire\">\n                      <img\n                        src={potatoLogo}\n                        alt=\"\"\n                        width=\"100px\"\n                        height=\"100px\"\n                      />\n                      <div className=\"mypage_info_potato_value\">\n                        {\" \"}\n                        = {goodPotato}\n                      </div>\n                    </div>\n                    <div className=\"mypage_info_tresh_entire\">\n                      <img\n                        className=\"mypage_info_tresh_logo\"\n                        src={tresh}\n                        alt=\"\"\n                        width=\"75px\"\n                        height=\"110px\"\n                      />\n                      <div className=\"mypage_info_tresh_value\">\n                        {\" \"}\n                        = {badPotato}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Mypage;\n",["66","67"],"/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/App.js",[],"/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/FieldContents.js",[],"/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/EditInfo.js",["68"],"import React, { Component } from \"react\";\nimport potatoLogo from \"../image/potato.png\";\nimport axios from \"axios\";\nimport \"./EditInfo.css\";\n// 92번줄에서 수정하고 나서 field로 가야합니다. 이쪽이 안됩니다! => 95번 줄\n// 비밀번호가 서로 다를 때 화면에 나타나는 부분 구현이 필요합니다. => 179번 줄\nclass EditInfo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nickname: \"\",\n      password: \"\",\n      inspect: \"\",\n      differ: false,\n      pwCheck: true,\n      nicknameChk: false,\n      comfirmNickname: \"\",\n      goodPotato: 0,\n      badPotato: 0,\n    };\n\n    this.goToMyPage = this.goToMyPage.bind(this);\n    this.signOutHandler = this.signOutHandler.bind(this);\n    this.goToField = this.goToField.bind(this);\n    this.goToInstruction = this.goToInstruction.bind(this);\n    this.goToBadPotatoes = this.goToBadPotatoes.bind(this);\n    this.nicknameChecker = this.nicknameChecker.bind(this);\n    this.formInputValue = this.formInputValue.bind(this);\n    this.confirmChecker = this.confirmChecker.bind(this);\n    this.countPotatoNumber = this.countPotatoNumber.bind(this);\n  }\n\n  componentDidMount() {\n    this.countPotatoNumber();\n  }\n\n  formInputValue(e) {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  countPotatoNumber() {\n    const potatoes = this.props.location.state.potatoes;\n    let goodPotatoCnt = 0;\n    let badPotatoCnt = 0;\n    potatoes.map((potato) => {\n      if (potato.status === \"good\") {\n        goodPotatoCnt++;\n      } else {\n        badPotatoCnt++;\n      }\n    });\n    this.setState({\n      goodPotato: goodPotatoCnt,\n      badPotato: badPotatoCnt,\n    });\n  }\n\n  goToField() {\n    axios({\n      method: \"get\",\n      url: `https://www.hypotato.com/userinfo`,\n      withCredentials: true,\n    }).then((userInfo) => {\n      this.props.history.push(\"/field\", { ...userInfo.data.data }); // 어디서든지 감자 프로필 이미지를 누르면 밭으로 가는데, 그 때 다시 밭 정보를 서버로부터 받아서 history push될 때 같이 보내주기 위한 로직.\n    });\n  }\n\n  goToMyPage() {\n    axios({\n      method: \"get\",\n      url: ` https://www.hypotato.com/userinfo`,\n      withCredentials: true,\n    }).then((userInfo) => {\n      // 👨🏻‍🌾👨🏻‍🌾👨🏻‍🌾👨🏻‍🌾👨🏻‍🌾this.setState({ isFieldClicked: false });\n      this.props.history.push(\"/mypage\", { ...userInfo.data.data });\n    });\n  }\n\n  signOutHandler() {\n    axios({\n      method: \"post\",\n      url: `https://www.hypotato.com/signout`,\n      withCredentials: true,\n    }).then(() => {\n      this.props.history.push(\"/\");\n      this.props.classNameChanger(); // 로그아웃하면 다시 배경화면을 움직이도록 바꾸게 하는 메소드; App.js로부터 넘어옴\n    });\n  }\n\n  goToInstruction() {\n      const potatoes = this.props.location.state.potatoes; \n      // 사용설명서로 갈 때는 axios요청이 불필요한데, 감자 개수를 카운트 하기 위해, state에 있는 값을 보냄. \n      const {goodPotato, badPotato} = this.state;\n      this.props.history.push(\"/instruction\", {goodPotato, badPotato, potatoes});\n  }\n\n  goToBadPotatoes() {\n    const potatoes = this.props.location.state.potatoes;\n    let badpotatoes = [];\n    potatoes.forEach((badPotato) => {\n      if (badPotato.status === \"bad\") {\n        badPotato.isChecked = false;\n        badpotatoes.push(badPotato);\n      }\n    });\n    let badPotatoCount = badpotatoes.length;\n    let goodPotatoCount = potatoes.length - badpotatoes.length;\n\n    this.props.history.push(\"/badpotato\", {\n      badPotatoes: badpotatoes,\n      potatoes: potatoes,\n      badPotatoCount: badPotatoCount,\n      goodPotatoCount: goodPotatoCount,\n    });\n  }\n\n  nicknameChecker() {\n    this.setState({\n      comfirmNickname: this.state.nickname,\n    });\n    // 닉네임 \"check\"버튼 눌렀을 때 서버로 중복체크 요청할 수 있는 메소드 만들어야 함.\n    axios({\n      method: \"put\",\n      url: `https://www.hypotato.com/userinfoupdate`,\n      data: { nickname: this.state.nickname, chk: \"nicknameChk\" },\n      withCredentials: true,\n    })\n      .then((res) => {\n        if (\n          res.data.chkNickname === \"nicknameOk\" &&\n          this.state.nickname !== \"\"\n        ) {\n          alert(\"사용가능한 닉네임입니다.\");\n          this.setState({\n            nicknameChk: true,\n          });\n        } else {\n          alert(\"닉네임이 잘못 됬습니다. 닉네임을 변경해 주세요.\");\n          this.setState({\n            nicknameChk: false,\n          });\n        }\n      })\n      .catch(() => {\n        alert(\"중복되는 닉네임이 있습니다. 닉네임을 변경해 주세요.\");\n        this.setState({\n          nicknameChk: false,\n        });\n      });\n  }\n\n  confirmChecker() {\n    if (\n      this.state.comfirmNickname === this.state.nickname &&\n      this.state.password !== \"\" &&\n      this.state.nickname !== \"\" &&\n      this.state.password === this.state.inspect\n    ) {\n      axios({\n        method: \"put\",\n        url: `https://www.hypotato.com/userinfoupdate`,\n        data: { nickname: this.state.nickname, password: this.state.password },\n        withCredentials: true,\n      }).then(() => {\n        axios({\n          method: \"get\",\n          url: `https://www.hypotato.com/userinfo`,\n          withCredentials: true,\n        }).then((userinfo) => {\n          alert(\"변경이 완료되었습니다.\");\n          this.props.history.push(\"/field\", { ...userinfo.data.data });\n        });\n      });\n    } else {\n      alert(\"수정 하고 싶은 내용을 확인 해주세요\");\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"field_entire\">\n        <div className=\"field_left\">\n          <div className=\"field_profile\">\n            <img\n              className=\"field_profile_photo\"\n              src={potatoLogo}\n              alt=\"이미지를 찾을 수 없습니다.\"\n              onClick={this.goToField}\n            />\n          </div>\n          <div className=\"field_potato_count\">\n            <div className=\"field_potato_count_good\">\n              정상 감자 개수 : {this.state.goodPotato}\n            </div>\n            <div onClick={this.goToBadPotatoes} className=\"field_potato_count_bad\">\n              썩은 감자 개수 : {this.state.badPotato}\n            </div>\n          </div>\n          <div className=\"field_categories\">\n            <div className=\"field_categories_title\">카테고리</div>\n            <div className=\" field_categories_table\">\n              <div className=\"field_categories_all\">전체</div>\n              <div className=\"field_categories_dev\">개발</div>\n              <div className=\"field_categories_travel\">여행</div>\n              <div className=\"field_categories_cook\">요리</div>\n            </div>\n          </div>\n        </div>\n        <div className=\"field_right\">\n          <div className=\"field_right_menu\">\n            <div className=\"field_right_menu_mypage\" onClick={this.goToMyPage}>\n              마이페이지\n            </div>\n            <div\n              className=\"field_right_menu_manual\"\n              onClick={this.goToInstruction}\n            >\n              사용 설명서\n            </div>\n            <div\n              className=\"field_right_menu_logout\"\n              onClick={this.signOutHandler}\n            >\n              로그아웃\n            </div>\n          </div>\n          <div className=\"field_right_fields, edit_main\">\n            <div className=\"edit_model\">\n              <div className=\"edit_name_key\">Nick Name</div>\n              <div className=\"edit_name_row\">\n                <input\n                  className=\"edit_name_value\"\n                  name=\"nickname\"\n                  type=\"text\"\n                  value={this.state.nickname}\n                  maxLength=\"100\"\n                  onChange={this.formInputValue}\n                />\n                <button\n                  className=\"edit_name_check\"\n                  onClick={this.nicknameChecker}\n                >\n                  check\n                </button>\n              </div>\n              <div className=\"edit_password_key\">Password</div>\n              <input\n                className=\"edit_password_value\"\n                name=\"password\"\n                type=\"password\"\n                value={this.state.password}\n                maxLength=\"14\"\n                onChange={this.formInputValue}\n              />\n              <input\n                className=\"edit_password_check\"\n                name=\"inspect\"\n                type=\"password\"\n                value={this.state.inspect}\n                maxLength=\"14\"\n                onChange={this.formInputValue}\n              />\n              {this.state.differ ? (\n                <div className=\"pw-differ\"> 비밀번호가 다릅니다. </div>\n              ) : (\n                \"\"\n              )}\n              {!this.state.pwCheck ? (\n                <div className=\"pw-check\">비밀번호 형식이 맞지 않습니다.</div>\n              ) : (\n                \"\"\n              )}\n              <button\n                className=\"edit_info_Confirm\"\n                onClick={this.confirmChecker}\n              >\n                Confirm\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default EditInfo;\n",["69","70"],"/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/BadPotatoFilter.js",["71"],"/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/AddPotato.js",[],"/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/Potato.js",["72","73"],"/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/Emoji.js",[],"/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/Instruction.js",[],["74","75"],"/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/Field.js",["76"],"/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/Signup.js",[],"/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/index.js",[],"/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/Signin.js",["77"],"import React from \"react\";\nimport \"./Signin.css\";\nimport potatoLogo from \"../image/potato.png\";\nimport { GoogleLogin } from \"react-google-login\";\nimport axios from \"axios\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nclass Signin extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // window.history.pushState(null, null, window.location.href);\n    // window.onpopstate = function (event) {\n    //   window.history.go(1);\n    // };\n\n    this.state = {\n      email: \"\",\n      password: \"\",\n      userinfo: null,\n    };\n\n    this.formInputValue = this.formInputValue.bind(this);\n    this.signInSubmit = this.signInSubmit.bind(this);\n    this.signUpPage = this.signUpPage.bind(this);\n    this.responseFailed = this.responseFailed.bind(this);\n    this.responseGoogle = this.responseGoogle.bind(this);\n  }\n\n  formInputValue(e) {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  signInSubmit() {\n    const { email, password, userinfo } = this.state;\n    // 인수님 사랑해요!\n    axios({\n      method: \"post\",\n      url: `https://www.hypotato.com/signin`,\n      data: { email, password },\n      withCredentials: true,\n    })\n      .then((res) => {\n        axios({\n          method: \"get\",\n          url: `https://www.hypotato.com/userinfo`,\n          withCredentials: true,\n        })\n          .then((userinfo) => {\n            this.props.history.push(\"/field\", { ...userinfo.data.data });\n            this.props.classNameChanger(); // 배경화면 애니메이션을 끄도록 클래스네임을 토글하는 메소드 App.js에서 넘어옴.\n          })\n          .catch((err) => {\n            alert(\"이메일 또는 비밀번호가 틀렸습니다.\");\n            window.location.reload();\n          });\n      })\n      .catch((err) => {\n        alert(\"이메일 또는 비밀번호가 틀렸습니다.\");\n        window.location.reload();\n      });\n  }\n\n  signUpPage() {\n    this.props.history.push(\"/signup\");\n  }\n\n  // Goole Login\n  responseGoogle(res) {\n    axios({\n      method: \"post\",\n      url: `https://www.hypotato.com/google/signin`,\n      data: {\n        nickname: res.profileObj.name,\n        email: res.profileObj.email,\n        password: res.profileObj.googleId,\n      },\n      withCredentials: true,\n    }).then(() => {\n      axios({\n        method: \"get\",\n        url: `https://www.hypotato.com/userinfo`,\n        withCredentials: true,\n      })\n        .then((userinfo) => {\n          this.props.history.push(\"/field\", { ...userinfo.data.data });\n          this.props.classNameChanger(); // 배경화면 애니메이션을 끄도록 클래스네임을 토글하는 메소드 App.js에서 넘어옴.\n        })\n        .catch((err) => console.log(err));\n    });\n  }\n\n  //Login Failed\n  responseFailed(err) {\n    console.log(err);\n  }\n\n  render() {\n    const { email, password } = this.state;\n    return (\n      <>\n        <div className=\"sigin_main\">\n          <div className=\"signin_title\">hypotato</div>\n          <div className=\"signin_subtitle\">How is your potato?</div>\n          <img\n            className=\"signin_potato\"\n            src={potatoLogo}\n            alt=\"이미지를 찾을 수 없음\"\n          />\n        </div>\n\n        <div className=\"signin_modal\">\n          <div>\n            <div className=\"sign_email\">Email</div>\n            <input\n              className=\"signin_input_mail\"\n              name=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={this.formInputValue}\n            />\n          </div>\n\n          <div>\n            <div className=\"sign_password\">Password</div>\n            <input\n              className=\"signin_input_pw\"\n              name=\"password\"\n              type=\"password\"\n              value={password}\n              maxLength=\"14\"\n              onChange={this.formInputValue}\n            />\n          </div>\n          <div>\n            <GoogleLogin\n              clientId={process.env.REACT_APP_GOOGLE_CLIENTID}\n              buttonText=\"Google\"\n              onSuccess={this.responseGoogle}\n              onFailure={this.responseFailed}\n              cookiePolicy={\"single_host_origin\"}\n            />\n            {/* <button className=\"sign_google\">connect with google</button> */}\n          </div>\n          <div className=\"buttons\">\n            <button className=\"sign_signin\" onClick={this.signInSubmit} >\n              Sign IN\n            </button>\n            <button onClick={this.signUpPage} className=\"sign_signup\">\n              Sign UP\n            </button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Signin;\n","/Users/sangrokpark/Desktop/1st-project-after-router/Hypotato-client/my-app/src/component/NotFoundPage.js",[],{"ruleId":"78","severity":1,"message":"79","line":32,"column":11,"nodeType":"80","messageId":"81","endLine":32,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":87,"column":27,"nodeType":"84","messageId":"85","endLine":87,"endColumn":29},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"82","severity":1,"message":"83","line":48,"column":27,"nodeType":"84","messageId":"85","endLine":48,"endColumn":29},{"ruleId":"86","replacedBy":"90"},{"ruleId":"88","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":286,"column":31,"nodeType":"94","endLine":286,"endColumn":46},{"ruleId":"82","severity":1,"message":"83","line":54,"column":27,"nodeType":"84","messageId":"85","endLine":54,"endColumn":29},{"ruleId":"92","severity":1,"message":"93","line":340,"column":29,"nodeType":"94","endLine":340,"endColumn":44},{"ruleId":"86","replacedBy":"95"},{"ruleId":"88","replacedBy":"96"},{"ruleId":"78","severity":1,"message":"97","line":245,"column":15,"nodeType":"80","messageId":"81","endLine":245,"endColumn":27},{"ruleId":"78","severity":1,"message":"98","line":37,"column":30,"nodeType":"80","messageId":"81","endLine":37,"endColumn":38},"no-unused-vars","'UserInfo' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-native-reassign",["99"],"no-negated-in-lhs",["100"],["99"],["100"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["99"],["100"],"'userPotatoes' is assigned a value but never used.","'userinfo' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]